{% macro service(x) %}{{ mark_documented(x) }}
.. namespace:: krpc::services
.. class:: {{ x.name }} : public krpc::Service

{{ gendoc(x.documentation) | indent }}

   .. function:: {{ x.name }}(krpc::Client* client)

      Construct an instance of this service.

{% for member in x.members.values() %}
{% if member.member_type == 'procedure' %}
{{ procedure(member) | indent }}
{% elif member.member_type == 'property' %}
{{ property(member) | indent }}
{% endif %}

{% endfor %}
{% endmacro %}

{% macro class(x) %}{{ mark_documented(x) }}
.. class:: {{ x.name }}

{{ gendoc(x.documentation) | indent }}

{% if hasdoc(x.documentation, './remarks') %}{{ remarks(x.documentation) | indent }}

{% endif %}
{% for member in x.members.values() %}
{% if member.member_type == 'class_method' %}
{{ class_method(member) | indent }}
{% elif member.member_type == 'class_static_method' %}
{{ class_static_method(member) | indent }}
{% elif member.member_type == 'class_property' %}
{{ class_property(member) | indent }}
{% endif %}

{% endfor %}
{% endmacro %}

{% macro procedure(x) %}{{ mark_documented(x) }}
.. function:: {{ domain.return_type(x.return_type) }} {{ domain.method_name(x.name) | snakecase }}({{ parameters(x.parameters) }})

{{ gendoc(x.documentation) | indent }}

{{ parameters_description(x.parameters) }}
{% if hasdoc(x.documentation, './returns') %}{{ returns(x.documentation) | indent }}
{% endif %}
   {{ game_scenes(x.game_scenes) }}

{% if hasdoc(x.documentation, './remarks') %}{{ remarks(x.documentation) | indent }}

{% endif %}
{% if x.appended != '' %}{{ x.appended | indent }}
{% endif %}
{% endmacro %}

{% macro property(x) %}{{ mark_documented(x) }}
{% if x.getter != None %}
.. function:: {{ domain.return_type(x.type) }} {{ domain.method_name(x.name) | snakecase }}()
{% endif %}
{% if x.setter != None %}
.. function:: void set_{{ x.name | snakecase }}({{ domain.parameter_type(x.type) }} value)
{% endif %}

{{ gendoc(x.documentation) | indent }}

{% if hasdoc(x.documentation, './returns') %}{{ returns(x.documentation) | indent }}
{% endif %}
   {{ game_scenes(x.game_scenes) }}

{% if hasdoc(x.documentation, './remarks') %}{{ remarks(x.documentation) | indent }}

{% endif %}
{% if x.appended != '' %}{{ x.appended | indent }}
{% endif %}
{% endmacro %}

{% macro class_method(x) %}{{ mark_documented(x) }}
.. function:: {{ domain.return_type(x.return_type) }} {{ domain.method_name(x.name) | snakecase }}({{ parameters(x.parameters[1:]) }})

{{ gendoc(x.documentation) | indent }}

{{ parameters_description(x.parameters[1:]) }}
{% if hasdoc(x.documentation, './returns') %}{{ returns(x.documentation) | indent }}
{% endif %}
   {{ game_scenes(x.game_scenes) }}

{% if hasdoc(x.documentation, './remarks') %}{{ remarks(x.documentation) | indent }}

{% endif %}
{% if x.appended != '' %}{{ x.appended | indent }}
{% endif %}
{% endmacro %}

{% macro class_static_method(x) %}{{ mark_documented(x) }}
.. function:: static {{ domain.return_type(x.return_type) }} {{ domain.method_name(x.name) | snakecase }}(Client& connection{% if x.parameters | length > 0 %}, {% endif %}{{ parameters(x.parameters) }})

{{ gendoc(x.documentation) | indent }}

{{ parameters_description(x.parameters) }}
{% if hasdoc(x.documentation, './returns') %}{{ returns(x.documentation) | indent }}
{% endif %}
   {{ game_scenes(x.game_scenes) }}

{% if hasdoc(x.documentation, './remarks') %}{{ remarks(x.documentation) | indent }}

{% endif %}
{% if x.appended != '' %}{{ x.appended | indent }}
{% endif %}
{% endmacro %}

{% macro class_property(x) %}{{ mark_documented(x) }}
{{ property(x) }}
{% endmacro %}

{% macro enumeration(x) %}{{ mark_documented(x) }}
.. namespace:: krpc::services::{{ x.service_name }}
.. enum-struct:: {{ x.name }}

{{ gendoc(x.documentation) | indent }}

{% if hasdoc(x.documentation, './remarks') %}{{ remarks(x.documentation) | indent }}{% endif %}
{% for value in x.values.values() %}{{ mark_documented(value) }}
   .. enumerator:: {{ domain.enumeration_name(value.name) | snakecase }}

{{ gendoc(value.documentation) | indent(width=6) }}

{% if hasdoc(value.documentation, './remarks') %}{{ remarks(value.documentation) | indent(width=6) }}{% endif %}
{% endfor %}
{% endmacro %}

{% macro exception(x) %}{{ mark_documented(x) }}
.. namespace:: krpc::services::{{ x.service_name }}
.. class:: {{ x.name }}

{{ gendoc(x.documentation) | indent }}

{% if hasdoc(x.documentation, './remarks') %}{{ remarks(x.documentation) | indent }}{% endif %}
{% endmacro %}

{% macro parameters(x) %}
{% for p in x %}{{ parameter(p) }}{% if not loop.last %}, {% endif %}{% endfor %}
{% endmacro %}

{% macro parameter(x) %}
{% if not x.has_default_value -%}
{{ domain.parameter_type(x.type) }} {{ x.name | snakecase }}
{%- else -%}
{{ domain.parameter_type(x.type) }} {{ x.name | snakecase }} = {{ domain.default_value(x.default_value, x.type) }}
{%- endif %}
{% endmacro %}

{% macro parameters_description(x) %}
{% if x | length > 0 %}
   :Parameters:

   {% for p in x %}
   {% if hasdoc(p.documentation, './param[@name=\''+p.name+'\']') %}    * **{{ p.name | snakecase }}** -- {{ gendoc(p.documentation, './param[@name=\''+p.name+'\']') | singleline }}{% endif %}

   {% endfor %}
{% endif %}
{% endmacro %}

{% macro returns(x) %}
:returns: {{ gendoc(x, './returns') | singleline }}
{% endmacro %}

{% macro remarks(x) %}
.. note::

{{ gendoc(x, './remarks') | indent }}
{% endmacro %}

{% macro game_scenes(x) %}
{% if x != None and x != 'All' %}
:Game Scenes: {{ x }}
{% endif %}
{% endmacro %}
