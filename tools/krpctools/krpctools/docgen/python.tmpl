{% macro service(x) %}{{ mark_documented(x) }}
.. module:: {{ x.name }}

{{ gendoc(x.documentation) }}

{% for member in x.members.values() %}
{% if member.member_type == 'procedure' %}
{{ procedure(member) }}
{% elif member.member_type == 'property' %}
{{ property(member) }}
{% endif %}

{% endfor %}
{% endmacro %}

{% macro class(x) %}{{ mark_documented(x) }}
.. class:: {{ x.name }}

{{ gendoc(x.documentation) | indent }}

{% if hasdoc(x.documentation, './remarks') %}{{ remarks(x.documentation) | indent }}

{% endif %}
{% for member in x.members.values() %}
{% if member.member_type == 'class_method' %}
{{ class_method(member) | indent }}
{% elif member.member_type == 'class_static_method' %}
{{ class_static_method(member) | indent }}
{% elif member.member_type == 'class_property' %}
{{ class_property(member) | indent }}
{% endif %}

{% endfor %}
{% endmacro %}

{% macro procedure(x) %}{{ mark_documented(x) }}
.. staticmethod:: {{ domain.method_name(x.name) }}({{ parameters(x.parameters) }})

{{ gendoc(x.documentation) | indent }}

{% for p in x.parameters %}
   :param {{ domain.parameter_type(p.type) }} {{ p.name | snakecase }}:{% if hasdoc(p.documentation, './param[@name=\''+p.name+'\']') %} {{ gendoc(p.documentation, './param[@name=\''+p.name+'\']') | singleline }}{% endif %}

{% endfor %}
{% if hasdoc(x.documentation, './returns') %}{{ returns(x.documentation) | indent }}
{% endif %}
{% if x.return_type != None %}
   :rtype: {{ domain.type_description(x.return_type) }}
{% endif %}
   {{ game_scenes(x.game_scenes) }}

{% if hasdoc(x.documentation, './remarks') %}{{ remarks(x.documentation) | indent }}

{% endif %}
{% if x.appended != '' %}{{ x.appended | indent }}
{% endif %}
{% endmacro %}

{% macro property(x) %}{{ mark_documented(x) }}
.. attribute:: {{ domain.method_name(x.name) }}

{{ gendoc(x.documentation) | indent }}

   :Attribute: {% if x.getter != None and x.setter != None %}Can be read or written{% elif x.getter != None %}Read-only, cannot be set{% else %}Write-only, cannot be read{% endif %}

{% if hasdoc(x.documentation, './returns') %}{{ returns(x.documentation) | indent }}
{% endif %}
   :rtype: {{ domain.type_description(x.type) }}
   {{ game_scenes(x.game_scenes) }}

{% if hasdoc(x.documentation, './remarks') %}{{ remarks(x.documentation) | indent }}

{% endif %}
{% if x.appended != '' %}{{ x.appended | indent }}
{% endif %}
{% endmacro %}

{% macro class_method(x) %}{{ mark_documented(x) }}
.. method:: {{ domain.method_name(x.name) }}({{ parameters(x.parameters[1:]) }})

{{ gendoc(x.documentation) | indent }}

{% for p in x.parameters[1:] %}
   :param {{ domain.parameter_type(p.type) }} {{ p.name | snakecase }}:{% if hasdoc(p.documentation, './param[@name=\''+p.name+'\']') %} {{ gendoc(p.documentation, './param[@name=\''+p.name+'\']') | singleline }}{% endif %}

{% endfor %}
{% if hasdoc(x.documentation, './returns') %}{{ returns(x.documentation) | indent }}
{% endif %}
{% if x.return_type != None %}
   :rtype: {{ domain.type_description(x.return_type) }}
{% endif %}
   {{ game_scenes(x.game_scenes) }}

{% if hasdoc(x.documentation, './remarks') %}{{ remarks(x.documentation) | indent }}

{% endif %}
{% if x.appended != '' %}{{ x.appended | indent }}
{% endif %}
{% endmacro %}

{% macro class_static_method(x) %}{{ mark_documented(x) }}
.. staticmethod:: {{ domain.method_name(x.name) }}({{ parameters(x.parameters) }})

{{ gendoc(x.documentation) | indent }}

{% for p in x.parameters %}
   :param {{ domain.parameter_type(p.type) }} {{ p.name | snakecase }}:{% if hasdoc(p.documentation, './param[@name=\''+p.name+'\']') %} {{ gendoc(p.documentation, './param[@name=\''+p.name+'\']') | singleline }}{% endif %}

{% endfor %}
{% if hasdoc(x.documentation, './returns') %}{{ returns(x.documentation) | indent }}
{% endif %}
{% if x.return_type != None %}
   :rtype: {{ domain.type_description(x.return_type) }}
{% endif %}
   {{ game_scenes(x.game_scenes) }}

{% if hasdoc(x.documentation, './remarks') %}{{ remarks(x.documentation) | indent }}

{% endif %}
{% if x.appended != '' %}{{ x.appended | indent }}
{% endif %}
{% endmacro %}

{% macro class_property(x) %}{{ mark_documented(x) }}
{{ property(x) }}
{% endmacro %}

{% macro enumeration(x) %}{{ mark_documented(x) }}
.. class:: {{ x.name }}

{{ gendoc(x.documentation) | indent }}

{% if hasdoc(x.documentation, './remarks') %}{{ remarks(x.documentation) | indent }}{% endif %}
{% for value in x.values.values() %}{{ mark_documented(value) }}
   .. data:: {{ value.name | snakecase }}

{{ gendoc(value.documentation) | indent(width=6) }}

{% if hasdoc(value.documentation, './remarks') %}{{ remarks(value.documentation) | indent(width=6) }}{% endif %}
{% endfor %}
{% endmacro %}

{% macro exception(x) %}{{ mark_documented(x) }}
.. class:: {{ x.name }}

{{ gendoc(x.documentation) | indent }}

{% if hasdoc(x.documentation, './remarks') %}{{ remarks(x.documentation) | indent }}{% endif %}
{% endmacro %}

{% macro parameters(x) %}
{% for p in x %}{{ parameter(p) }}{% if not loop.last %}, {% endif %}{% endfor %}
{% endmacro %}

{% macro parameter(x) %}
{% if not x.has_default_value -%}
{{ x.name | snakecase }}
{%- else -%}
[{{ x.name | snakecase }} = {{ domain.default_value(x.default_value, x.type) }}]
{%- endif %}
{% endmacro %}

{% macro returns(x) %}
:returns: {{ gendoc(x, './returns') | singleline }}
{% endmacro %}

{% macro remarks(x) %}
.. note::

{{ gendoc(x, './remarks') | indent }}
{% endmacro %}

{% macro game_scenes(x) %}
{% if x != None and x != 'All' %}
:Game Scenes: {{ x }}
{% endif %}
{% endmacro %}
